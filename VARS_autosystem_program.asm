// VARS AutoSystem main program
// Designed and Developed by Team VARS
// P1 FOR LCD DATA
// P2.3 - LIGHT, P2.4 - FAN, P2.5 - MOTOR, P2.6 - AC, P2.7 - DOOR
// P2.0 - RS, P2.1 - RW, P2.2 - E
// P3.5 - INPUT DEVICE

ORG 00H
LJMP MAIN

// LCD INFO and CONFIGURATION STRINGS
ORG 500H
MYINIT:			DB 38H,0CH,01H,0
INFO:			DB "VARS AutoSystem",0
INFO_LIGHTON:	DB "Switching ON LIGHT ...",0
INFO_LIGHTOFF:	DB "Switching OFF LIGHT...",0
INFO_FANON:		DB "Switching ON FAN.......",0
INFO_FANOFF:	DB "Switching OFF FAN......",0
INFO_MOTORON:	DB "Switching ON MOTOR...",0
INFO_MOTOROFF:	DB "Switching OFF MOTOR...",0
INFO_ACON:		DB "Switching ON AC.......",0
INFO_ACOFF:		DB "Switching OFF AC......",0
INFO_DOORON:	DB "Opening DOOR..........",0
INFO_DOOROFF:	DB "Closing DOOR..........",0
INFO_BLANK:		DB "                       ",0
GSM_CONFIG:		DB "at+cmgf=1",0
GSM_MSG:		DB "at+cmgr=",0
	
// SERIAL ISR
ORG 23H
// RECEPTION INTERRUPT FIRED
REC_INTERRUPT:	MOV R1, SBUF
				JB P3.5, REAL_DATA		// CHECK IF DATA RECEIVED MUST REFLECT ON RELAYS
				JB PSW.1, REAL_DATA		// CHECK IF MESSAGE REQUEST CHARACTER ARRIVED
				CJNE R2, #01, SKIP_CHAR1	// MSG NUMBER RECEIVED
				MOV R2, #00H			//CLEARING R2 FOR NEXT USE
				SJMP HANDLE_REQ
				
				// WAIT TILL A COMMA IS RECEIVED
				SKIP_CHAR1:	CJNE R1, #',', NEAR1
							INC R2
							NEAR1:	LJMP RETI_RETI
				
				// ASK GSM MODULE TO SEND MSG BASED ON MSG NUMBER RECEIVED
				HANDLE_REQ:	CLR TI
							MOV DPTR, #GSM_MSG
							TRAN_STRING1:	CLR A
											MOVC A, @A+DPTR
											CJNE A, #00H, TRANSMIT1
											CLR TI
											MOV SBUF, R1
											WAIT_TX2:	JNB TI, WAIT_TX2
											CLR TI
											SETB PSW.1
											LJMP RETI_RETI
											TRANSMIT1:	MOV SBUF, A
														WAIT_TX1:	JNB TI, WAIT_TX1
														CLR TI
														INC DPTR
														SJMP TRAN_STRING1
				
				// STRING WITH DATA OF RELAYS
				REAL_DATA:
				CJNE R0, #06, SKIP_CHAR2
				MOV R0, #00H
				SJMP HANDLE_DATA
				
				// WAIT TILL 6 " ARE RECEIVED, AND INCREMENT TO KEEP COUNT
				SKIP_CHAR2:	CJNE R1, #'"', NEAR2
							INC R0
							NEAR2:	LJMP RETI_RETI
				
				// DATA EXTRACTED FOR RELAY CONTROL
				HANDLE_DATA:
				// RELOAD LCD CLEAR DELAY
				CLR PSW.1
				MOV R5, #255
				MOV R4, #255
				MOV R3, #35
				
				CJNE R1, #'A', STAGE2
				// LIGHT ON
				CLR P2.3
				MOV A, #0C0H
				ACALL CMDWRT
				ACALL DELAY
				MOV DPTR, #INFO_LIGHTON
				ACALL LCD_PRINT
				LJMP RETI_RETI

				STAGE2:	CJNE R1, #'a', STAGE3
						// LIGHT OFF
						SETB P2.3
						MOV A, #0C0H
						ACALL CMDWRT
						ACALL DELAY
						MOV DPTR, #INFO_LIGHTOFF
						ACALL LCD_PRINT
						LJMP RETI_RETI
						
				STAGE3:	CJNE R1, #'B', STAGE4
						// FAN ON
						CLR P2.4
						MOV A, #0C0H
						ACALL CMDWRT
						ACALL DELAY
						MOV DPTR, #INFO_FANON
						ACALL LCD_PRINT
						LJMP RETI_RETI
						
				STAGE4:	CJNE R1, #'b', STAGE5
						// FAN OFF
						SETB P2.4
						MOV A, #0C0H
						ACALL CMDWRT
						ACALL DELAY
						MOV DPTR, #INFO_FANOFF
						ACALL LCD_PRINT
						SJMP RETI_RETI
						
				STAGE5:	CJNE R1, #'C', STAGE6
						// MOTOR ON
						CLR P2.5
						MOV A, #0C0H
						ACALL CMDWRT
						ACALL DELAY
						MOV DPTR, #INFO_MOTORON
						ACALL LCD_PRINT
						SJMP RETI_RETI
						
				STAGE6:	CJNE R1, #'c', STAGE7
						// MOTOR OFF
						SETB P2.5
						MOV A, #0C0H
						ACALL CMDWRT
						ACALL DELAY
						MOV DPTR, #INFO_MOTOROFF
						ACALL LCD_PRINT
						SJMP RETI_RETI
						
				STAGE7:	CJNE R1, #'D', STAGE8
						// AC ON
						CLR P2.6
						MOV A, #0C0H
						ACALL CMDWRT
						ACALL DELAY
						MOV DPTR, #INFO_ACON
						ACALL LCD_PRINT
						SJMP RETI_RETI
						
				STAGE8:	CJNE R1, #'d', STAGE9
						// AC OFF
						SETB P2.6
						MOV A, #0C0H
						ACALL CMDWRT
						ACALL DELAY
						MOV DPTR, #INFO_ACOFF
						ACALL LCD_PRINT
						SJMP RETI_RETI
						
				STAGE9:	CJNE R1, #'E', STAGE10
						// DOOR OPEN
						CLR P2.7
						MOV A, #0C0H
						ACALL CMDWRT
						ACALL DELAY
						MOV DPTR, #INFO_DOORON
						ACALL LCD_PRINT
						SJMP RETI_RETI
						
				STAGE10:	CJNE R1, #'e', RETI_RETI
							// DOOR CLOSE
							SETB P2.7
							MOV A, #0C0H
							ACALL CMDWRT
							ACALL DELAY
							MOV DPTR, #INFO_DOOROFF
							ACALL LCD_PRINT
							SJMP RETI_RETI
							


RETI_RETI:	CLR RI
			RETI

// DELAY OF 
DELAY:	MOV TH0, #0FFH
		MOV TL0, #31H
		SETB TR0
		BACK_DELAY:	JNB TF0, BACK_DELAY
					CLR TR0
					CLR TF0
					RET

// CHECK IF LCD IS FREE TO RECEIVE DATA/COMMAND
LCD_READY:	SETB P1.7
			CLR P2.0
			SETB P2.1
			LOOP_READY:	CLR P2.2
						SETB P2.2
						JB P1.7, LOOP_READY
						RET
						
// COMMAND WRITE SUBROUTINE
CMDWRT:	MOV P1, A
		CLR P2.0
		CLR P2.1
		SETB P2.2
		ACALL DELAY
		CLR P2.2
		RET

// DATA WRITE SUBROUTINE
DATAWRT:	MOV P1, A
			SETB P2.0
			CLR P2.1
			SETB P2.2
			ACALL DELAY
			CLR P2.2
			RET

// INITIALISE PORTS
INIT_PORTS:	MOV P1, #00H
			MOV P2, #00H
			SETB P2.3
			SETB P2.4
			SETB P2.5
			SETB P2.6
			SETB P2.7
			RET

// INITIALISE LCD
INIT_LCD:	CLR A
			MOVC A, @A+DPTR
			JZ RET_RET
			ACALL LCD_READY
			ACALL CMDWRT
			ACALL DELAY
			INC DPTR
			SJMP INIT_LCD

// LCD PRINTING
LCD_PRINT:	CLR A
			MOVC A, @A+DPTR
			JZ RET_RET
			ACALL LCD_READY
			ACALL DATAWRT
			ACALL DELAY
			INC DPTR
			SJMP LCD_PRINT
			
RET_RET:	RET

// INITIALISING SERIAL COMMN
INIT_SERIAL:	MOV TMOD, #21H
				MOV TH1, #0FDH
				MOV SCON, #50H
				MOV IE, #90H
				SETB TR1
				CLR TI
				// CONFIGURING GSM TO RECEIVE SMS
				MOV DPTR, #GSM_CONFIG
				TRAN_STRING:	CLR A
								MOVC A, @A+DPTR
								CJNE A, #00H, TRANSMIT
								CLR TI
								RET
								TRANSMIT:	MOV SBUF, A
											WAIT_TX:	JNB TI, WAIT_TX
											CLR TI
											INC DPTR
											SJMP TRAN_STRING
				RET

// MAIN PART OF THE PROGRAM				
MAIN:	MOV R0, #00H
		MOV R2, #00H
		CLR PSW.1
		ACALL INIT_PORTS
		MOV DPTR, #MYINIT
		ACALL INIT_LCD
		MOV DPTR, #INFO
		ACALL LCD_PRINT
		ACALL INIT_SERIAL
		// CLEAR LCD BASED ON LOOP DELAYS
		DELAY1:	MOV R5, #255
		DELAY2:	MOV R4, #255
		DELAY3: MOV R3, #35
		DELAY4:	DJNZ R3, DELAY4
				DJNZ R4, DELAY3
				DJNZ R5, DELAY2
				// OVERWRITE LCD WITH BLANK STRING
				MOV A, #0C0H
				ACALL CMDWRT
				ACALL DELAY
				MOV DPTR, #INFO_BLANK
				ACALL LCD_PRINT
				SJMP DELAY1
END
